/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Ventanas;

import Clases.CCP;
import Clases.Reservacion;
import Clases.Salones;
import static Ventanas.Dia.fe;
import java.text.SimpleDateFormat;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.LinkedList;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 *
 */
public class Hora extends javax.swing.JFrame {

    private CCP ccp;
    private Salones salon;
    private LinkedList<Reservacion> res;
    public LocalTime horaInicio;
    public LocalTime Horafin;
    public String Hora1;
    public String Hora2;

    private Date fech;
    private ArrayList<LocalTime> Horafinal, horainicial;

    /**
     * Creates new form Hora
     */
    public Hora(CCP c) {
        this.ccp = c;
        initComponents();
        this.setLocationRelativeTo(null);

        // Mostrar Fecha Selecionada En El Calendario
        Dia dia = new Dia(ccp);
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        fech = dia.fe;
        String fechaCadena = sdf.format(fech);
        fecha.setText(fechaCadena);

        // Mostrar Salon Selecionado
        Salon s = new Salon(ccp);
        Salones sal = s.sa;
        txtSalon.setText(sal.toString());

        salon = sal;

        txtSalon.setEditable(false);
        fecha.setEditable(false);

        res = ccp.reservacionesHora(fecha.getText(), sal);
        int iterador = 0;
        Horafinal = new ArrayList<>();
        horainicial = new ArrayList<>();
        while (iterador < res.size()) {
            Horafinal.add(res.get(iterador).getHora_fin());
            horainicial.add(res.get(iterador).getHora_inicio());
            iterador = iterador + 1;
        }

        System.out.println(Horafinal);

        ManejadorJtable mj = new ManejadorJtable();
        jTable1.setModel(mj);

    }

    Salon salo = new Salon(ccp);
    Dia di = salo.ventana;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSpinner1 = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        txtSalon = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        fecha = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        siguiente = new javax.swing.JButton();
        btnAnterior = new javax.swing.JButton();
        MinutoI = new javax.swing.JSpinner();
        HoraI = new javax.swing.JSpinner();
        HoraFi = new javax.swing.JSpinner();
        MinutoFinal = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Salon:");

        jLabel2.setText("Fecha:");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel3.setText("Hora Inicio:");

        jLabel4.setText("Hora Fin:");

        siguiente.setText("Siguiente");
        siguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siguienteActionPerformed(evt);
            }
        });

        btnAnterior.setText("Anterior");
        btnAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnteriorActionPerformed(evt);
            }
        });

        MinutoI.setModel(new javax.swing.SpinnerNumberModel(0, 0, 60, 30));
        MinutoI.setNextFocusableComponent(HoraFi);

        HoraI.setModel(new javax.swing.SpinnerNumberModel(8, 8, 21, 1));
        HoraI.setNextFocusableComponent(MinutoI);

        HoraFi.setModel(new javax.swing.SpinnerNumberModel(9, 9, 22, 1));
        HoraFi.setNextFocusableComponent(MinutoFinal);

        MinutoFinal.setModel(new javax.swing.SpinnerNumberModel(0, 0, 60, 10));

        jLabel5.setText("Minutos:");

        jLabel6.setText("Minutos:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAnterior)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(siguiente))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel2)
                                .addComponent(jLabel1))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(fecha, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtSalon, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(17, 17, 17)
                                    .addComponent(HoraI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel5)
                                    .addGap(18, 18, 18)
                                    .addComponent(MinutoI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addComponent(HoraFi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel6)
                                    .addGap(18, 18, 18)
                                    .addComponent(MinutoFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtSalon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(fecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(MinutoI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HoraI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(HoraFi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MinutoFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(siguiente)
                    .addComponent(btnAnterior))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnteriorActionPerformed
        dispose();
        di.setVisible(true);
    }//GEN-LAST:event_btnAnteriorActionPerformed

    private Reservaciones ventana = null;


    private void siguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siguienteActionPerformed

        if (this.ventana == null) {
            String Hi = Integer.toString((int) HoraI.getValue());
            String mi = Integer.toString((int) MinutoI.getValue());
            String hf = Integer.toString((int) HoraFi.getValue());
            String mf = Integer.toString((int) MinutoFinal.getValue());
            System.out.println("Este Es El Minuto" + (int) HoraI.getValue());

            /////////////hora inicial/////////////
            if ((int) HoraI.getValue() <= 9 && ((int) MinutoI.getValue() <= 9)) {
                Hora1 = ("0" + Hi + ":" + "0" + mi + ":00");
            } else {

                if ((int) HoraI.getValue() > 9 && ((int) MinutoI.getValue() <= 9)) {
                    Hora1 = (Hi + ":"
                            + "0" + mi + ":00");
                } else {
                    if ((int) HoraI.getValue() <= 9 && ((int) MinutoI.getValue() > 9)) {
                        Hora1 = ("0" + Hi + ":" + mi + ":00");
                    } else {
                        Hora1 = (Hi + ":" + mi + ":00");
                    }

                }

            }

            ///////////////////////////////hora final////////////////////
            if ((int) HoraFi.getValue() <= 9 && ((int) MinutoFinal.getValue() <= 9)) {
                Hora2 = ("0" + hf + ":" + "0" + mf + ":00");
            } else {
                if ((int) HoraFi.getValue() > 9 && ((int) MinutoFinal.getValue() <= 9)) {
                    Hora2 = (hf + ":" + "0" + mf + ":00");
                } else {
                    if ((int) HoraFi.getValue() <= 9 && ((int) MinutoFinal.getValue() > 9)) {
                        Hora2 = ("0" + hf + ":" + mf + ":00");

                    } else {
                        Hora2 = (hf + ":" + mf + ":00");
                    }

                }

            }
            int iterrardor = 0;
            int contador = 0;
            horaInicio = LocalTime.parse(Hora1);
            Horafin = LocalTime.parse(Hora2);
            if (res.isEmpty()) {
                this.ventana = new Reservaciones(ccp, Hora1, Hora2, salon, fech);
                this.ventana.setResizable(false);
                dispose();
                ventana.setVisible(true);
            }
            while ((iterrardor < Horafinal.size())) {

                int horai = horainicial.get(iterrardor).getHour();
                int horf = Horafinal.get(iterrardor).getHour();
                int minui = horainicial.get(iterrardor).getMinute();
                int minuf = Horafinal.get(iterrardor).getMinute();

                int tras1 = horaInicio.getHour() - horf;

                int tras2 = Horafin.getHour() - horai;

                int muniini = horaInicio.getMinute() - minuf;

                int minufina = Horafin.getMinute() - minui;
                int Diferencia1 = tras1 * 60 + muniini;
                int diferencia2 = tras2 * 60 + minufina;

                if (Diferencia1 < 0) {
                    Diferencia1 = Diferencia1 * -1;

                }
                if (diferencia2 < 0) {
                    diferencia2 = diferencia2 * -1;

                }
                System.out.println("Hola " + diferencia2);
                if ((horaInicio == horainicial.get(iterrardor)) || (Horafin == Horafinal.get(iterrardor))
                        || (horaInicio == Horafinal.get(iterrardor)) || (Horafin == horainicial.get(iterrardor))) {
                    JOptionPane.showMessageDialog(null, "Hora De Reservacion No Disponible");
                    break;
                }
                if ((horaInicio.isAfter(horainicial.get(iterrardor))) && (horaInicio.isBefore(Horafinal.get(iterrardor)))) {
                    JOptionPane.showMessageDialog(null, "Hora De Reservacion No Disponible");
                    break;
                }
                if ((Horafin.isAfter(horainicial.get(iterrardor))) && (Horafin.isBefore(Horafinal.get(iterrardor)))) {
                    JOptionPane.showMessageDialog(null, "Hora De Reservacion No Disponible");
                    break;
                }

                if (((horaInicio.getHour() <= horai) && (Horafin.getHour() >= horai))
                        || ((horaInicio.getHour() <= horf) && (Horafin.getHour() >= horf))) {
                    JOptionPane.showMessageDialog(null, "Hora De Reservacion No Disponible");
                    break;

                }
                if (horaInicio.getHour() >= Horafin.getHour()) {
                    JOptionPane.showMessageDialog(null, "Hora De Reservacion No Disponible");
                    break;
                }

                if (Diferencia1 < 60 || (diferencia2 < 60)) {
                    JOptionPane.showMessageDialog(null, "Hora De Reservacion No Disponible");
                    break;
                }

                if ((horaInicio != horainicial.get(iterrardor)) && (Horafin != Horafinal.get(iterrardor))) {
                    iterrardor++;
                    contador++;
                }

                if (contador == Horafinal.size()) {
                    this.ventana = new Reservaciones(ccp, Hora1, Hora2, salon, fech);
                    this.ventana.setResizable(false);
                    dispose();
                    ventana.setVisible(true);
                    break;

                }

            }

        }


    }//GEN-LAST:event_siguienteActionPerformed

    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner HoraFi;
    private javax.swing.JSpinner HoraI;
    private javax.swing.JSpinner MinutoFinal;
    private javax.swing.JSpinner MinutoI;
    private javax.swing.JButton btnAnterior;
    private javax.swing.JTextField fecha;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton siguiente;
    private javax.swing.JTextField txtSalon;
    // End of variables declaration//GEN-END:variables

    public class ManejadorJtable extends AbstractTableModel {

        @Override
        public int getRowCount() {

            if (res.isEmpty()) {
                jTable1.setModel((new DefaultTableModel()));

            }
            return res.size();
        }

        @Override
        public int getColumnCount() {
            return 3;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Reservacion dc = res.get(rowIndex);
            Object valor = "";
            switch (columnIndex) {
                case 0:
                    valor = dc.getCliente().getNombres();
                    break;
                case 1:
                    valor = dc.getHora_inicio();
                    break;
                case 2:
                    valor = dc.getHora_fin();
                    break;

            }
            return valor;
        }

        private Class[] clases = {
            String.class, LocalTime.class, LocalTime.class
        };

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            return clases[columnIndex];
        }

        private String[] nombreColumnas = {
            "Nombre Cliente", "Hora Inicio", "Hora Fin"};

        public String getColumnName(int columnIndex) {

            return nombreColumnas[columnIndex];

        }

    }
}
